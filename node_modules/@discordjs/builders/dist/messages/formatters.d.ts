/**
 * Wraps the content inside a codeblock with no language.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function codeBlock<C extends string>(content: C): `\`\`\`\n${C}\`\`\``;
/**
 * Wraps the content inside a codeblock with the specified language.
 * @param language The language for the codeblock.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function codeBlock<L extends string, C extends string>(language: L, content: C): `\`\`\`${L}\n${C}\`\`\``;
/**
 * Wraps the content inside an inline code.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function inlineCode<C extends string>(content: C): `\`${C}\``;
/**
 * Formats the content into italic text.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function italic<C extends string>(content: C): `_${C}_`;
/**
 * Formats the content into bold text.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function bold<C extends string>(content: C): `**${C}**`;
/**
 * Formats the content into underscored text.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function underscore<C extends string>(content: C): `__${C}__`;
/**
 * Formats the content into strikethrough text.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function strikethrough<C extends string>(content: C): `~~${C}~~`;
/**
 * Formats the content into a quote. This needs to be at the start of the line for Discord to format it.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function quote<C extends string>(content: C): `> ${C}`;
/**
 * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it.
 * @param content The content to wrap.
 * @returns The formatted content.
 */
export declare function blockQuote<C extends string>(content: C): `>>> ${C}`;
/**
 * Formats a date into a short date-time string.
 * @param date The date to format, defaults to the current time.
 */
export declare function time(date?: Date): `<t:${bigint}>`;
/**
 * Formats a date given a format style.
 * @param date The date to format.
 * @param style The style to use.
 */
export declare function time<S extends TimestampStylesString>(date: Date, style: S): `<t:${bigint}:${S}>`;
/**
 * Formats the given timestamp into a short date-time string.
 * @param seconds The time to format, represents an UNIX timestamp in seconds.
 */
export declare function time<C extends number>(seconds: C): `<t:${C}>`;
/**
 * Formats the given timestamp into a short date-time string.
 * @param seconds The time to format, represents an UNIX timestamp in seconds.
 * @param style The style to use.
 */
export declare function time<C extends number, S extends TimestampStylesString>(seconds: C, style: S): `<t:${C}:${S}>`;
/**
 * The [message formatting timestamp styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord.
 */
export declare const TimestampStyles: {
    /**
     * Short time format, consisting of hours and minutes, e.g. 16:20.
     */
    readonly ShortTime: "t";
    /**
     * Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30.
     */
    readonly LongTime: "T";
    /**
     * Short date format, consisting of day, month, and year, e.g. 20/04/2021.
     */
    readonly ShortDate: "d";
    /**
     * Long date format, consisting of day, month, and year, e.g. 20 April 2021.
     */
    readonly LongDate: "D";
    /**
     * Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20.
     */
    readonly ShortDateTime: "f";
    /**
     * Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20.
     */
    readonly LongDateTime: "F";
    /**
     * Relative time format, consisting of a relative duration format, e.g. 2 months ago.
     */
    readonly RelativeTime: "R";
};
/**
 * The possible values, see {@link TimestampStyles} for more information.
 */
export declare type TimestampStylesString = typeof TimestampStyles[keyof typeof TimestampStyles];
//# sourceMappingURL=formatters.d.ts.map